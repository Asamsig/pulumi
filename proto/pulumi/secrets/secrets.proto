// Copyright 2016-2022, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "pulumi/plugin.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

package pulumirpc.secrets;

option go_package = "github.com/pulumi/pulumi/sdk/v3/proto/go/secrets";

// SecretsProvider is a service that understands how to encrypt and decrypt secrets.
service SecretsProvider {
    // Encrypt encrypts plaintext to ciphertext.
    rpc Encrypt(EncryptRequest) returns (EncryptResponse) {}

    // Decrypt decrypts ciphertext to plaintext.
    rpc Decrypt(DecryptRequest) returns (DecryptResponse) {}

    // Configure setups a secrets provider from existing state.
    rpc Configure(ConfigureRequest) returns (ConfigureResponse) {}

    // Initialize setups a new secrets provider.
    rpc Initialize(InitializeRequest) returns (InitializeResponse) {}
}

message EncryptRequest {
    repeated string plaintexts = 1; // The plaintext to be encrypted.
}

message EncryptResponse {
    repeated string ciphertexts = 1; // The encrypted ciphertext.
}

message DecryptRequest {
    repeated string ciphertexts = 1; // The ciphertext to be decrypted.
}

message DecryptResponse {
    repeated string plaintexts = 1; // The decrypted plaintext.
}


message Prompt {
    // The label the engine should send the prompt response back as in the request inputs map.
    string label = 1;
    // The text to display to prompt for a value.
    string text = 2;
    // For the first prompt a plugin returns this should be the error text to use if no prompt response are
    // possible to obtain. For later prompts returned by a plugin (that is after, inputs have been partially
    // filled) this should be used to report an error in the inputs (e.g. wrong passwords).
    string error = 3;
    // Which labels to keep in the inputs map. Some prompts invalidate earlier inputs.
    repeated string preserve = 4;
}

message ConfigureRequest {
    string state = 1; // The JSON encoded state of the secrets provider.
    map<string, string> inputs = 2; // Prompt inputs that the user has provided.
}

message ConfigureResponse {
    Prompt prompt = 1;
}

message InitializeRequest {
    repeated string args = 1; // the arguments that were passed to "pulumi stack change-secrets-provider".
    map<string, string> inputs = 2; // Prompt inputs that the user has provided.
}

message InitializeResponse {
    Prompt prompt = 1;
    string state = 2; // The JSON encoded state of the secrets provider.
}