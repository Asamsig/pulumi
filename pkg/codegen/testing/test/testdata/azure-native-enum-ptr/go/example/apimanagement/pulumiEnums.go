// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished.
type ProductStateEnum string

const (
	ProductStateEnumNotPublished = ProductStateEnum("notPublished")
	ProductStateEnumPublished    = ProductStateEnum("published")
)

func (ProductStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*ProductStateEnum)(nil)).Elem()
}

func (e ProductStateEnum) ToProductStateEnumOutput() ProductStateEnumOutput {
	return pulumi.ToOutput(e).(ProductStateEnumOutput)
}

func (e ProductStateEnum) ToProductStateEnumOutputWithContext(ctx context.Context) ProductStateEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ProductStateEnumOutput)
}

func (e ProductStateEnum) ToProductStateEnumPtrOutput() ProductStateEnumPtrOutput {
	return e.ToProductStateEnumPtrOutputWithContext(context.Background())
}

func (e ProductStateEnum) ToProductStateEnumPtrOutputWithContext(ctx context.Context) ProductStateEnumPtrOutput {
	return ProductStateEnum(e).ToProductStateEnumOutputWithContext(ctx).ToProductStateEnumPtrOutputWithContext(ctx)
}

func (e ProductStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProductStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProductStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ProductStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ProductStateEnumOutput struct{ *pulumi.OutputState }

func (ProductStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProductStateEnum)(nil)).Elem()
}

func (o ProductStateEnumOutput) ToProductStateEnumOutput() ProductStateEnumOutput {
	return o
}

func (o ProductStateEnumOutput) ToProductStateEnumOutputWithContext(ctx context.Context) ProductStateEnumOutput {
	return o
}

func (o ProductStateEnumOutput) ToProductStateEnumPtrOutput() ProductStateEnumPtrOutput {
	return o.ToProductStateEnumPtrOutputWithContext(context.Background())
}

func (o ProductStateEnumOutput) ToProductStateEnumPtrOutputWithContext(ctx context.Context) ProductStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProductStateEnum) *ProductStateEnum {
		return &v
	}).(ProductStateEnumPtrOutput)
}

func (o ProductStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ProductStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProductStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ProductStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProductStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProductStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ProductStateEnumPtrOutput struct{ *pulumi.OutputState }

func (ProductStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProductStateEnum)(nil)).Elem()
}

func (o ProductStateEnumPtrOutput) ToProductStateEnumPtrOutput() ProductStateEnumPtrOutput {
	return o
}

func (o ProductStateEnumPtrOutput) ToProductStateEnumPtrOutputWithContext(ctx context.Context) ProductStateEnumPtrOutput {
	return o
}

func (o ProductStateEnumPtrOutput) Elem() ProductStateEnumOutput {
	return o.ApplyT(func(v *ProductStateEnum) ProductStateEnum {
		if v != nil {
			return *v
		}
		var ret ProductStateEnum
		return ret
	}).(ProductStateEnumOutput)
}

func (o ProductStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProductStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ProductStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ProductStateEnumInput is an input type that accepts ProductStateEnumArgs and ProductStateEnumOutput values.
// You can construct a concrete instance of `ProductStateEnumInput` via:
//
//          ProductStateEnumArgs{...}
type ProductStateEnumInput interface {
	pulumi.Input

	ToProductStateEnumOutput() ProductStateEnumOutput
	ToProductStateEnumOutputWithContext(context.Context) ProductStateEnumOutput
}

var productStateEnumPtrType = reflect.TypeOf((**ProductStateEnum)(nil)).Elem()

type ProductStateEnumPtrInput interface {
	pulumi.Input

	ToProductStateEnumPtrOutput() ProductStateEnumPtrOutput
	ToProductStateEnumPtrOutputWithContext(context.Context) ProductStateEnumPtrOutput
}

type productStateEnumPtr string

func ProductStateEnumPtr(v string) ProductStateEnumPtrInput {
	return (*productStateEnumPtr)(&v)
}

func (*productStateEnumPtr) ElementType() reflect.Type {
	return productStateEnumPtrType
}

func (in *productStateEnumPtr) ToProductStateEnumPtrOutput() ProductStateEnumPtrOutput {
	return pulumi.ToOutput(in).(ProductStateEnumPtrOutput)
}

func (in *productStateEnumPtr) ToProductStateEnumPtrOutputWithContext(ctx context.Context) ProductStateEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ProductStateEnumPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ProductStateEnumOutput{})
	pulumi.RegisterOutputType(ProductStateEnumPtrOutput{})
}
