/*
Pulumi Service API

The Pulumi Service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EncryptValueRequest struct for EncryptValueRequest
type EncryptValueRequest struct {
	Plaintext string `json:"plaintext"`
	AdditionalProperties map[string]interface{}
}

type _EncryptValueRequest EncryptValueRequest

// NewEncryptValueRequest instantiates a new EncryptValueRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptValueRequest(plaintext string) *EncryptValueRequest {
	this := EncryptValueRequest{}
	this.Plaintext = plaintext
	return &this
}

// NewEncryptValueRequestWithDefaults instantiates a new EncryptValueRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptValueRequestWithDefaults() *EncryptValueRequest {
	this := EncryptValueRequest{}
	return &this
}

// GetPlaintext returns the Plaintext field value
func (o *EncryptValueRequest) GetPlaintext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Plaintext
}

// GetPlaintextOk returns a tuple with the Plaintext field value
// and a boolean to check if the value has been set.
func (o *EncryptValueRequest) GetPlaintextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plaintext, true
}

// SetPlaintext sets field value
func (o *EncryptValueRequest) SetPlaintext(v string) {
	o.Plaintext = v
}

func (o EncryptValueRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["plaintext"] = o.Plaintext
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *EncryptValueRequest) UnmarshalJSON(bytes []byte) (err error) {
	varEncryptValueRequest := _EncryptValueRequest{}

	if err = json.Unmarshal(bytes, &varEncryptValueRequest); err == nil {
		*o = EncryptValueRequest(varEncryptValueRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "plaintext")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEncryptValueRequest struct {
	value *EncryptValueRequest
	isSet bool
}

func (v NullableEncryptValueRequest) Get() *EncryptValueRequest {
	return v.value
}

func (v *NullableEncryptValueRequest) Set(val *EncryptValueRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptValueRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptValueRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptValueRequest(val *EncryptValueRequest) *NullableEncryptValueRequest {
	return &NullableEncryptValueRequest{value: val, isSet: true}
}

func (v NullableEncryptValueRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptValueRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


