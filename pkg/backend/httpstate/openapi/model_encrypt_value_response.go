/*
Pulumi Service API

The Pulumi Service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EncryptValueResponse struct for EncryptValueResponse
type EncryptValueResponse struct {
	Ciphertext string `json:"ciphertext"`
	AdditionalProperties map[string]interface{}
}

type _EncryptValueResponse EncryptValueResponse

// NewEncryptValueResponse instantiates a new EncryptValueResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptValueResponse(ciphertext string) *EncryptValueResponse {
	this := EncryptValueResponse{}
	this.Ciphertext = ciphertext
	return &this
}

// NewEncryptValueResponseWithDefaults instantiates a new EncryptValueResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptValueResponseWithDefaults() *EncryptValueResponse {
	this := EncryptValueResponse{}
	return &this
}

// GetCiphertext returns the Ciphertext field value
func (o *EncryptValueResponse) GetCiphertext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ciphertext
}

// GetCiphertextOk returns a tuple with the Ciphertext field value
// and a boolean to check if the value has been set.
func (o *EncryptValueResponse) GetCiphertextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ciphertext, true
}

// SetCiphertext sets field value
func (o *EncryptValueResponse) SetCiphertext(v string) {
	o.Ciphertext = v
}

func (o EncryptValueResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ciphertext"] = o.Ciphertext
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *EncryptValueResponse) UnmarshalJSON(bytes []byte) (err error) {
	varEncryptValueResponse := _EncryptValueResponse{}

	if err = json.Unmarshal(bytes, &varEncryptValueResponse); err == nil {
		*o = EncryptValueResponse(varEncryptValueResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ciphertext")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEncryptValueResponse struct {
	value *EncryptValueResponse
	isSet bool
}

func (v NullableEncryptValueResponse) Get() *EncryptValueResponse {
	return v.value
}

func (v *NullableEncryptValueResponse) Set(val *EncryptValueResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptValueResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptValueResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptValueResponse(val *EncryptValueResponse) *NullableEncryptValueResponse {
	return &NullableEncryptValueResponse{value: val, isSet: true}
}

func (v NullableEncryptValueResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptValueResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


