openapi: 3.0.2
info:
  version: 1.0.0
  title: Pulumi Service API
  description: The Pulumi Service API
  license:
    name: Apache-2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: https://api.pulumi.com/api
    description: Main production server for Pulumi.
  - url: https://api.pulumi-staging.io/api
    description: Staging server for Pulumi development.
tags:
  - name: stack
    description: Operations for stacks
  - name: user
    description: Operations for users
paths:
  /cli/version:
    get:
      summary: getCLIVersionInfo asks the service for information about versions of the CLI (the newest version as well as the oldest version before the CLI should warn about an upgrade).
      operationId: getCLIVersionInfo
      responses:
        "200":
          description: The response from the server with information about CLI versions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  latestVersion:
                    type: string
                  oldestWithoutWarning:
                    type: string
  /user:
    get:
      tags:
        - user
      summary: Returns the current user.
      operationId: getCurrentUser
      security:
        - {}
        - token
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/serviceUser"
  /user/stacks:
    get:
      tags:
        - user
      summary: Lists all stacks the current user has access to, optionally filtered by project.
      operationId: listStacks
      security:
        - token
      parameters:
        - name: project
          in: query
          schema:
            type: string
        - name: organization
          in: query
          schema:
            type: string
        - name: tagName
          in: query
          schema:
            type: string
        - name: tagValue
          in: query
          schema:
            type: string
        - name: continuationToken
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Returns a set of stack summaries. This call is designed to be inexpensive.
          content:
            application/json:
              schema:
                type: object
                properties:
                  stacks:
                    type: array
                    items:
                      $ref: "#/components/schemas/stackSummary"
                  continuationToken:
                    type: string
                    description: >
                      ContinuationToken is an opaque value used to mark the end of the all stacks. If non-nil,
                      pass it into a subsequent call in order to get the next batch of results.

                      A value of nil means that all stacks have been returned.
  /{organization}/{project}:
    parameters:
      - $ref: "#/components/parameters/organization"
      - $ref: "#/components/parameters/project"
    post:
      tags:
        - stack
      summary: CreateStack creates a stack with the given cloud and stack name in the scope of the indicated project.
      operationId: CreateStack
      security:
        - token
      requestBody:
        description: CreateStackRequest defines the request body for creating a new Stack
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - stackName
              properties:
                stackName:
                  type: string
                  description: The rest of the StackIdentifier (e.g. organization, project) is in the URL.
                tags:
                  type: object
                  description: An optional set of tags to apply to the stack.
                  additionalProperties:
                    type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/stack"
  /{organization}/{project}/{stack}:
    parameters:
      - $ref: "#/components/parameters/organization"
      - $ref: "#/components/parameters/project"
      - $ref: "#/components/parameters/stack"
    get:
      tags:
        - stack
      summary: GetStack retrieves the stack with the given name.
      operationId: getStack
      security:
        - token
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/stack"
    delete:
      tags:
        - stack
      summary: DeleteStack deletes the indicated stack. If force is true, the stack is deleted even if it contains resources.
      operationId: deleteStack
      security:
        - token
      parameters:
        - name: force
          in: query
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
  /{organization}/{project}/{stack}/tags:
    parameters:
      - $ref: "#/components/parameters/organization"
      - $ref: "#/components/parameters/project"
      - $ref: "#/components/parameters/stack"
    patch:
      tags:
        - stack
      summary: UpdateStackTags updates the stacks's tags, replacing all existing tags.
      operationId: updateStackTags
      security:
        - token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tags"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
  /{organization}/{project}/{stack}/encrypt:
    parameters:
      - $ref: "#/components/parameters/organization"
      - $ref: "#/components/parameters/project"
      - $ref: "#/components/parameters/stack"
    post:
      tags:
        - stack
      summary: EncryptValue encrypts a plaintext value in the context of the indicated stack.
      operationId: encryptValue
      security:
        - token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: EncryptValueRequest
              type: object
              required:
                - plaintext
              properties:
                plaintext:
                  type: string
                  format: byte
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                title: EncryptValueResponse
                type: object
                required:
                  - ciphertext
                properties:
                  ciphertext:
                    type: string
                    format: byte

  /{organization}/{project}/{stack}/decrypt:
    parameters:
      - $ref: "#/components/parameters/organization"
      - $ref: "#/components/parameters/project"
      - $ref: "#/components/parameters/stack"
    post:
      tags:
        - stack
      summary: DecryptValue decrypts a ciphertext value in the context of the indicated stack.
      operationId: decryptValue
      security:
        - token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: DecryptValueRequest
              type: object
              required:
                - ciphertext
              properties:
                ciphertext:
                  type: string
                  format: byte
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                title: DecryptValueResponse
                type: object
                required:
                  - plaintext
                properties:
                  plaintext:
                    type: string
                    format: byte
  /stacks/{organization}/{project}:
    parameters:
      - $ref: "#/components/parameters/organization"
      - $ref: "#/components/parameters/project"
    head:
      tags:
        - stack
      summary: Returns true if a project with the given name exists, or false otherwise.
      operationId: doesProjectExist
      security:
        - token
      responses:
        "200":
          description: The project exists
          content:
            application/json:
              schema:
                type: object

components:
  parameters:
    organization:
      name: organization
      in: path
      required: true
      schema:
        type: string
    project:
      name: project
      in: path
      required: true
      schema:
        type: string
    stack:
      name: stack
      in: path
      required: true
      schema:
        type: string
  schemas:
    stack:
      title: Stack
      description: Stack describes a Stack running on a Pulumi Cloud.
      type: object
      properties:
        orgName:
          type: string
        projectName:
          type: string
        stackName:
          type: string
        activeUpdate:
          type: string
        tags:
          $ref: "#/components/schemas/tags"
        version:
          type: integer
        currentOperation:
          $ref: "#/components/schemas/operationStatus"
    operationStatus:
      title: OperationStatus
      description: OperationStatus describes the state of an operation being performed on a Pulumi stack.
      type: object
      properties:
        kind:
          $ref: "#/components/schemas/updateKind"
        author:
          type: string
        started:
          type: integer
          format: int64
    stackSummary:
      type: object
      properties:
        orgName:
          type: string
        projectName:
          type: string
        stackName:
          type: string
        lastUpdate:
          type: integer
          format: int64
        resourceCount:
          type: integer
    serviceUserInfo:
      type: object
      properties:
        name:
          type: string
        githubLogin:
          type: string
        avatarUrl:
          type: string
        email:
          type: string
    serviceUser:
      type: object
      properties:
        id:
          type: string
        githubLogin:
          type: string
        name:
          type: string
        email:
          type: string
        avatarUrl:
          type: string
        organizations:
          type: array
          items:
            $ref: "#/components/schemas/serviceUserInfo"
        identities:
          type: array
          items:
            type: string
        siteAdmin:
          type: boolean
          default: false
    updateKind:
      title: UpdateKind
      description: >
        UpdateKind is an enum for the type of update performed.

        * `update` - update is the prototypical Pulumi program update.
        * `preview` - preview is a preview of an update, without impacting resources.
        * `refresh` - refresh is an update that came from a refresh operation.
        * `rename` - rename is an update that changes the stack name or project name of a Pulumi program.
        * `destroy` - destroy is an update which removes all resources.
        * `import` - import is an update that entails importing a raw checkpoint file.
        * `resource-import` - resource-import is an update that entails importing one or more resources.
      enum:
        - update
        - preview
        - refresh
        - rename
        - destroy
        - import
        - resource-import
    tags:
      title: Tags
      description: Tags are a set of key values applied to stacks.
      type: object
      additionalProperties:
        type: string
        maxLength: 256
  securitySchemes:
    token:
      type: apiKey
      description: Pulumi API token
      name: Authorization
      in: header
      scheme: Bearer
