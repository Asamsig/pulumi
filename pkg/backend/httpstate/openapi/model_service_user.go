/*
Pulumi Service API

The Pulumi Service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ServiceUser struct for ServiceUser
type ServiceUser struct {
	Id *string `json:"id,omitempty"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	Name *string `json:"name,omitempty"`
	Email *string `json:"email,omitempty"`
	AvatarUrl *string `json:"avatarUrl,omitempty"`
	Organizations []ServiceUserInfo `json:"organizations,omitempty"`
	Identities []string `json:"identities,omitempty"`
	SiteAdmin *bool `json:"siteAdmin,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServiceUser ServiceUser

// NewServiceUser instantiates a new ServiceUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceUser() *ServiceUser {
	this := ServiceUser{}
	var siteAdmin bool = false
	this.SiteAdmin = &siteAdmin
	return &this
}

// NewServiceUserWithDefaults instantiates a new ServiceUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceUserWithDefaults() *ServiceUser {
	this := ServiceUser{}
	var siteAdmin bool = false
	this.SiteAdmin = &siteAdmin
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ServiceUser) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceUser) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ServiceUser) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ServiceUser) SetId(v string) {
	o.Id = &v
}

// GetGithubLogin returns the GithubLogin field value if set, zero value otherwise.
func (o *ServiceUser) GetGithubLogin() string {
	if o == nil || o.GithubLogin == nil {
		var ret string
		return ret
	}
	return *o.GithubLogin
}

// GetGithubLoginOk returns a tuple with the GithubLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceUser) GetGithubLoginOk() (*string, bool) {
	if o == nil || o.GithubLogin == nil {
		return nil, false
	}
	return o.GithubLogin, true
}

// HasGithubLogin returns a boolean if a field has been set.
func (o *ServiceUser) HasGithubLogin() bool {
	if o != nil && o.GithubLogin != nil {
		return true
	}

	return false
}

// SetGithubLogin gets a reference to the given string and assigns it to the GithubLogin field.
func (o *ServiceUser) SetGithubLogin(v string) {
	o.GithubLogin = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ServiceUser) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceUser) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ServiceUser) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ServiceUser) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ServiceUser) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceUser) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ServiceUser) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ServiceUser) SetEmail(v string) {
	o.Email = &v
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise.
func (o *ServiceUser) GetAvatarUrl() string {
	if o == nil || o.AvatarUrl == nil {
		var ret string
		return ret
	}
	return *o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceUser) GetAvatarUrlOk() (*string, bool) {
	if o == nil || o.AvatarUrl == nil {
		return nil, false
	}
	return o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *ServiceUser) HasAvatarUrl() bool {
	if o != nil && o.AvatarUrl != nil {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given string and assigns it to the AvatarUrl field.
func (o *ServiceUser) SetAvatarUrl(v string) {
	o.AvatarUrl = &v
}

// GetOrganizations returns the Organizations field value if set, zero value otherwise.
func (o *ServiceUser) GetOrganizations() []ServiceUserInfo {
	if o == nil || o.Organizations == nil {
		var ret []ServiceUserInfo
		return ret
	}
	return o.Organizations
}

// GetOrganizationsOk returns a tuple with the Organizations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceUser) GetOrganizationsOk() ([]ServiceUserInfo, bool) {
	if o == nil || o.Organizations == nil {
		return nil, false
	}
	return o.Organizations, true
}

// HasOrganizations returns a boolean if a field has been set.
func (o *ServiceUser) HasOrganizations() bool {
	if o != nil && o.Organizations != nil {
		return true
	}

	return false
}

// SetOrganizations gets a reference to the given []ServiceUserInfo and assigns it to the Organizations field.
func (o *ServiceUser) SetOrganizations(v []ServiceUserInfo) {
	o.Organizations = v
}

// GetIdentities returns the Identities field value if set, zero value otherwise.
func (o *ServiceUser) GetIdentities() []string {
	if o == nil || o.Identities == nil {
		var ret []string
		return ret
	}
	return o.Identities
}

// GetIdentitiesOk returns a tuple with the Identities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceUser) GetIdentitiesOk() ([]string, bool) {
	if o == nil || o.Identities == nil {
		return nil, false
	}
	return o.Identities, true
}

// HasIdentities returns a boolean if a field has been set.
func (o *ServiceUser) HasIdentities() bool {
	if o != nil && o.Identities != nil {
		return true
	}

	return false
}

// SetIdentities gets a reference to the given []string and assigns it to the Identities field.
func (o *ServiceUser) SetIdentities(v []string) {
	o.Identities = v
}

// GetSiteAdmin returns the SiteAdmin field value if set, zero value otherwise.
func (o *ServiceUser) GetSiteAdmin() bool {
	if o == nil || o.SiteAdmin == nil {
		var ret bool
		return ret
	}
	return *o.SiteAdmin
}

// GetSiteAdminOk returns a tuple with the SiteAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceUser) GetSiteAdminOk() (*bool, bool) {
	if o == nil || o.SiteAdmin == nil {
		return nil, false
	}
	return o.SiteAdmin, true
}

// HasSiteAdmin returns a boolean if a field has been set.
func (o *ServiceUser) HasSiteAdmin() bool {
	if o != nil && o.SiteAdmin != nil {
		return true
	}

	return false
}

// SetSiteAdmin gets a reference to the given bool and assigns it to the SiteAdmin field.
func (o *ServiceUser) SetSiteAdmin(v bool) {
	o.SiteAdmin = &v
}

func (o ServiceUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.GithubLogin != nil {
		toSerialize["githubLogin"] = o.GithubLogin
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.AvatarUrl != nil {
		toSerialize["avatarUrl"] = o.AvatarUrl
	}
	if o.Organizations != nil {
		toSerialize["organizations"] = o.Organizations
	}
	if o.Identities != nil {
		toSerialize["identities"] = o.Identities
	}
	if o.SiteAdmin != nil {
		toSerialize["siteAdmin"] = o.SiteAdmin
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ServiceUser) UnmarshalJSON(bytes []byte) (err error) {
	varServiceUser := _ServiceUser{}

	if err = json.Unmarshal(bytes, &varServiceUser); err == nil {
		*o = ServiceUser(varServiceUser)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "githubLogin")
		delete(additionalProperties, "name")
		delete(additionalProperties, "email")
		delete(additionalProperties, "avatarUrl")
		delete(additionalProperties, "organizations")
		delete(additionalProperties, "identities")
		delete(additionalProperties, "siteAdmin")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceUser struct {
	value *ServiceUser
	isSet bool
}

func (v NullableServiceUser) Get() *ServiceUser {
	return v.value
}

func (v *NullableServiceUser) Set(val *ServiceUser) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceUser) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceUser(val *ServiceUser) *NullableServiceUser {
	return &NullableServiceUser{value: val, isSet: true}
}

func (v NullableServiceUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


