/*
Pulumi Service API

The Pulumi Service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Encrypt200Response struct for Encrypt200Response
type Encrypt200Response struct {
	Ciphertext *string `json:"ciphertext,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Encrypt200Response Encrypt200Response

// NewEncrypt200Response instantiates a new Encrypt200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncrypt200Response() *Encrypt200Response {
	this := Encrypt200Response{}
	return &this
}

// NewEncrypt200ResponseWithDefaults instantiates a new Encrypt200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncrypt200ResponseWithDefaults() *Encrypt200Response {
	this := Encrypt200Response{}
	return &this
}

// GetCiphertext returns the Ciphertext field value if set, zero value otherwise.
func (o *Encrypt200Response) GetCiphertext() string {
	if o == nil || o.Ciphertext == nil {
		var ret string
		return ret
	}
	return *o.Ciphertext
}

// GetCiphertextOk returns a tuple with the Ciphertext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Encrypt200Response) GetCiphertextOk() (*string, bool) {
	if o == nil || o.Ciphertext == nil {
		return nil, false
	}
	return o.Ciphertext, true
}

// HasCiphertext returns a boolean if a field has been set.
func (o *Encrypt200Response) HasCiphertext() bool {
	if o != nil && o.Ciphertext != nil {
		return true
	}

	return false
}

// SetCiphertext gets a reference to the given string and assigns it to the Ciphertext field.
func (o *Encrypt200Response) SetCiphertext(v string) {
	o.Ciphertext = &v
}

func (o Encrypt200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ciphertext != nil {
		toSerialize["ciphertext"] = o.Ciphertext
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Encrypt200Response) UnmarshalJSON(bytes []byte) (err error) {
	varEncrypt200Response := _Encrypt200Response{}

	if err = json.Unmarshal(bytes, &varEncrypt200Response); err == nil {
		*o = Encrypt200Response(varEncrypt200Response)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ciphertext")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEncrypt200Response struct {
	value *Encrypt200Response
	isSet bool
}

func (v NullableEncrypt200Response) Get() *Encrypt200Response {
	return v.value
}

func (v *NullableEncrypt200Response) Set(val *Encrypt200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableEncrypt200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableEncrypt200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncrypt200Response(val *Encrypt200Response) *NullableEncrypt200Response {
	return &NullableEncrypt200Response{value: val, isSet: true}
}

func (v NullableEncrypt200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncrypt200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


