/*
Pulumi Service API

The Pulumi Service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


type DefaultApi interface {

	/*
	GetCLIVersionInfo getCLIVersionInfo asks the service for information about versions of the CLI (the newest version as well as the oldest version before the CLI should warn about an upgrade).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCLIVersionInfoRequest
	*/
	GetCLIVersionInfo(ctx context.Context) ApiGetCLIVersionInfoRequest

	// GetCLIVersionInfoExecute executes the request
	//  @return GetCLIVersionInfo200Response
	GetCLIVersionInfoExecute(r ApiGetCLIVersionInfoRequest) (*GetCLIVersionInfo200Response, *http.Response, error)
}

// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiGetCLIVersionInfoRequest struct {
	ctx context.Context
	ApiService DefaultApi
}

func (r ApiGetCLIVersionInfoRequest) Execute() (*GetCLIVersionInfo200Response, *http.Response, error) {
	return r.ApiService.GetCLIVersionInfoExecute(r)
}

/*
GetCLIVersionInfo getCLIVersionInfo asks the service for information about versions of the CLI (the newest version as well as the oldest version before the CLI should warn about an upgrade).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCLIVersionInfoRequest
*/
func (a *DefaultApiService) GetCLIVersionInfo(ctx context.Context) ApiGetCLIVersionInfoRequest {
	return ApiGetCLIVersionInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetCLIVersionInfo200Response
func (a *DefaultApiService) GetCLIVersionInfoExecute(r ApiGetCLIVersionInfoRequest) (*GetCLIVersionInfo200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetCLIVersionInfo200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetCLIVersionInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cli/version"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
