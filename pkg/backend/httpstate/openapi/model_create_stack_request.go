/*
Pulumi Service API

The Pulumi Service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateStackRequest struct for CreateStackRequest
type CreateStackRequest struct {
	// The rest of the StackIdentifier (e.g. organization, project) is in the URL.
	StackName string `json:"stackName"`
	// An optional set of tags to apply to the stack.
	Tags *map[string]string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateStackRequest CreateStackRequest

// NewCreateStackRequest instantiates a new CreateStackRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateStackRequest(stackName string) *CreateStackRequest {
	this := CreateStackRequest{}
	this.StackName = stackName
	return &this
}

// NewCreateStackRequestWithDefaults instantiates a new CreateStackRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateStackRequestWithDefaults() *CreateStackRequest {
	this := CreateStackRequest{}
	return &this
}

// GetStackName returns the StackName field value
func (o *CreateStackRequest) GetStackName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StackName
}

// GetStackNameOk returns a tuple with the StackName field value
// and a boolean to check if the value has been set.
func (o *CreateStackRequest) GetStackNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StackName, true
}

// SetStackName sets field value
func (o *CreateStackRequest) SetStackName(v string) {
	o.StackName = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CreateStackRequest) GetTags() map[string]string {
	if o == nil || o.Tags == nil {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStackRequest) GetTagsOk() (*map[string]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CreateStackRequest) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *CreateStackRequest) SetTags(v map[string]string) {
	o.Tags = &v
}

func (o CreateStackRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["stackName"] = o.StackName
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CreateStackRequest) UnmarshalJSON(bytes []byte) (err error) {
	varCreateStackRequest := _CreateStackRequest{}

	if err = json.Unmarshal(bytes, &varCreateStackRequest); err == nil {
		*o = CreateStackRequest(varCreateStackRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "stackName")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateStackRequest struct {
	value *CreateStackRequest
	isSet bool
}

func (v NullableCreateStackRequest) Get() *CreateStackRequest {
	return v.value
}

func (v *NullableCreateStackRequest) Set(val *CreateStackRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateStackRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateStackRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateStackRequest(val *CreateStackRequest) *NullableCreateStackRequest {
	return &NullableCreateStackRequest{value: val, isSet: true}
}

func (v NullableCreateStackRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateStackRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


