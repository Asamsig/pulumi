/*
Pulumi Service API

The Pulumi Service API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// UpdateKind UpdateKind is an enum for the type of update performed. * `update` - update is the prototypical Pulumi program update. * `preview` - preview is a preview of an update, without impacting resources. * `refresh` - refresh is an update that came from a refresh operation. * `rename` - rename is an update that changes the stack name or project name of a Pulumi program. * `destroy` - destroy is an update which removes all resources. * `import` - import is an update that entails importing a raw checkpoint file. * `resource-import` - resource-import is an update that entails importing one or more resources. 
type UpdateKind string

// List of updateKind
const (
	UPDATE UpdateKind = "update"
	PREVIEW UpdateKind = "preview"
	REFRESH UpdateKind = "refresh"
	RENAME UpdateKind = "rename"
	DESTROY UpdateKind = "destroy"
	IMPORT UpdateKind = "import"
	RESOURCE_IMPORT UpdateKind = "resource-import"
)

// All allowed values of UpdateKind enum
var AllowedUpdateKindEnumValues = []UpdateKind{
	"update",
	"preview",
	"refresh",
	"rename",
	"destroy",
	"import",
	"resource-import",
}

func (v *UpdateKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UpdateKind(value)
	for _, existing := range AllowedUpdateKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UpdateKind", value)
}

// NewUpdateKindFromValue returns a pointer to a valid UpdateKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUpdateKindFromValue(v string) (*UpdateKind, error) {
	ev := UpdateKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UpdateKind: valid values are %v", v, AllowedUpdateKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UpdateKind) IsValid() bool {
	for _, existing := range AllowedUpdateKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to updateKind value
func (v UpdateKind) Ptr() *UpdateKind {
	return &v
}

type NullableUpdateKind struct {
	value *UpdateKind
	isSet bool
}

func (v NullableUpdateKind) Get() *UpdateKind {
	return v.value
}

func (v *NullableUpdateKind) Set(val *UpdateKind) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateKind) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateKind(val *UpdateKind) *NullableUpdateKind {
	return &NullableUpdateKind{value: val, isSet: true}
}

func (v NullableUpdateKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

