name: CI

permissions:
  contents: read

on:
  workflow_call:
    inputs:
      ref:
        required: true
        description: "GitHub ref to use"
        type: string
      version:
        required: true
        description: "Version to produce"
        type: string
      lint:
        required: false
        default: true
        description: "Whether to run lints"
        type: boolean
      test:
        required: false
        default: true
        description: "Whether to run tests"
        type: boolean
      enable-coverage:
        description: "Collects coverage stats; requires cov-enabled builds"
        default: false
        required: false
        type: boolean
      build-targets:
        required: false
        default: |
          [
            { "os": "linux",   "arch": "amd64", "build-platform": "ubuntu-latest" },
            { "os": "linux",   "arch": "arm64", "build-platform": "ubuntu-latest" },
            { "os": "windows", "arch": "amd64", "build-platform": "ubuntu-latest" },
            { "os": "windows", "arch": "arm64", "build-platform": "ubuntu-latest" },
            { "os": "darwin",  "arch": "amd64", "build-platform": "macos-latest" },
            { "os": "darwin",  "arch": "arm64", "build-platform": "macos-latest" }
          ]
        description: "Build targets to produce"
        type: string
      version-set:
        required: false
        description: "Set of language versions to use for builds, lints, releases, etc."
        type: string
        # Example provided for illustration, this value is derived by scripts/get-job-matrix.py build
        default: |
          {
            "dotnet": "6.0.x",
            "go": "1.18.x",
            "nodejs": "14.x",
            "python": "3.9.x"
          }

      unit-test-matrix:
        required: false
        description: Unit test matrix to run
        type: string
        # Example provided for illustration, this value is derived by scripts/get-job-matrix.py build
        default: |
          {
            "test-suite": [
              {
                "name": "Hello World",
                "command": "echo \"Hello, World!\""
              },
            ],
            "platform": [
              "ubuntu-latest"
            ],
            "version-set": [
              {
                "dotnet": "6.0.x",
                "go": "1.18.x",
                "nodejs": "14.x",
                "python": "3.9.x"
              }
            ]
          }
      integration-test-matrix:
        required: false
        description: Integration test matrix to run
        type: string
        # Example provided for illustration, this value is derived by scripts/get-job-matrix.py build
        default: |
          {
            "test-suite": [
              {
                "name": "Hello World",
                "command": "echo \"Hello, World!\""
              },
            ],
            "platform": [
              "ubuntu-latest"
            ],
            "version-set": [
              {
                "dotnet": "6.0.x",
                "go": "1.18.x",
                "nodejs": "14.x",
                "python": "3.9.x"
              }
            ]
          }


jobs:
  lint:
    name: lint
    if: ${{ inputs.lint }}
    uses: ./.github/workflows/ci-lint.yml
    with:
      ref: ${{ inputs.ref }}
      version-set: ${{ inputs.version-set }}

  workaround:
    # As of 2022-09-01, using inputs in matrices below result in "waiting for pending jobs" or
    # failures starting them. This job is a workaround to avoid that.
    #
    # See: https://github.com/pulumi/pulumi/actions/runs/2976429676
    #
    # By introducing this workaround node in the evaluator, the matrix jobs below succeed.
    name: workaround
    runs-on: ubuntu-latest
    outputs:
      # This job has only a trivial step and regurgitates workflow inputs as job outputs.
      build-targets: ${{ inputs.build-targets }}
      integration-test-matrix: ${{ inputs.integration-test-matrix }}
      unit-test-matrix: ${{ inputs.unit-test-matrix }}
    steps:
      - run: echo "OK"

  build-goreleaser-prep:
    name: goreleaser prep
    uses: ./.github/workflows/ci-build-goreleaser-prep.yml
    with:
      ref: ${{ inputs.ref }}
    secrets: inherit

  build-binaries:
    name: Build binaries
    needs: [workaround, build-goreleaser-prep]
    strategy:
      # To avoid tying up macOS runners:
      # If using IDE, ignore yaml-schema error: 'Incorrect type. Expected "boolean"'
      fail-fast: ${{ contains(needs.workaround.outputs.build-targets, 'macos') }}
      matrix:
        target: ${{ fromJson(needs.workaround.outputs.build-targets) }}
    uses: ./.github/workflows/ci-build-binaries.yml
    with:
      ref: ${{ inputs.ref }}
      version: ${{ inputs.version }}
      os: ${{ matrix.target.os }}
      arch: ${{ matrix.target.arch }}
      build-platform: ${{ matrix.target.build-platform }}
      version-set: ${{ inputs.version-set }}
    secrets: inherit

  build-sdks:
    name: Build SDKs
    uses: ./.github/workflows/ci-build-sdks.yml
    with:
      ref: ${{ inputs.ref }}
      version: ${{ inputs.version }}
      version-set: ${{ inputs.version-set }}
    secrets: inherit

  # Tests that can run concurrently with builds.
  unit-test:
    # By putting a variable in the name, we remove GitHub's auto-generated matrix parameters from
    # appearing in the rendered title of the job name: It changes this:
    #   CI / Unit Test (cd sdk/dotnet && make dotnet_test, cd sdk/dotnet && make dotnet_test, macos-latest, mi... / sdk/dotnet dotnet_test on macos-latest/current
    #   (See: https://github.com/pulumi/pulumi/runs/8241055084?check_suite_focus=true#logs)
    # To this:
    #   CI / Unit Test / sdk/dotnet dotnet_test on macos-latest/current
    name: Unit Test${{ matrix.platform && '' }}
    needs: [workaround]
    if: ${{ inputs.test && needs.workaround.outputs.unit-test-matrix != '[]' && needs.workaround.outputs.unit-test-matrix != '' }}
    strategy:
      fail-fast: ${{ contains(needs.workaround.outputs.unit-test-matrix, 'macos') }}
      matrix: ${{ fromJson(needs.workaround.outputs.unit-test-matrix) }}
    uses: ./.github/workflows/ci-run-test.yml
    with:
      ref: ${{ inputs.ref }}
      version: ${{ inputs.version }}
      platform: ${{ matrix.platform }}

      test-name: ${{ matrix.test-suite.name || matrix.test-suite.command }} on ${{ matrix.platform }}/${{ matrix.version-set.name }}
      test-command: ${{ matrix.test-suite.command }}
      is-integration-test: false
      enable-coverage: false # TODO: ${{ matrix.enable-coverage }}
      # require-build: false # TODO, remove ${{ matrix.require-build || false }}

      version-set: ${{ toJson(matrix.version-set) }}
    secrets: inherit

  # Tests that depend on builds
  integration-test:
    # By putting a variable in the name, we remove GitHub's auto-generated matrix parameters from
    # appearing in the rendered title of the job name. See: unit test.
    name: Integration Test${{ matrix.platform && '' }}
    needs: [workaround, build-binaries, build-sdks]
    if: ${{ inputs.test && needs.workaround.outputs.integration-test-matrix != '[]' && needs.workaround.outputs.integration-test-matrix != '' }}
    strategy:
      fail-fast: ${{ contains(needs.workaround.outputs.integration-test-matrix, 'macos') }}
      matrix: ${{ fromJson(needs.workaround.outputs.integration-test-matrix) }}
    uses: ./.github/workflows/ci-run-test.yml
    with:
      ref: ${{ inputs.ref }}
      version: ${{ inputs.version }}
      platform: ${{ matrix.platform }}

      test-name: ${{ matrix.test-suite.name || matrix.test-suite.command }} on ${{ matrix.platform }}/${{ matrix.version-set.name }}
      test-command: ${{ matrix.test-suite.command }}
      is-integration-test: true # TODO: set to true here
      enable-coverage: false # TODO: ${{ matrix.enable-coverage }}
      # require-build: false # TODO, remove ${{ matrix.require-build || false }}

      version-set: ${{ toJson(matrix.version-set) }}
    secrets: inherit
