name: Build SDKs

permissions:
  contents: read

on:
  workflow_call:
    inputs:
      ref:
        required: true
        description: "GitHub ref to use"
        type: string
      version:
        required: true
        description: "Version to produce"
        type: string
      python-version:
        description: 'Version of the Python toolchain for the build'
        default: '3.9.x'
        required: false
        type: string
      node-version:
        description: 'Version of the Node toolchain for the build'
        default: '14.x'
        required: false
        type: string
      dotnet-version:
        description: 'Version of the .NET toolchain for the build'
        default: '6.0.x'
        required: false
        type: string

defaults:
  run:
    shell: bash

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PULUMI_VERSION: ${{ inputs.version }}

jobs:
  build_python_sdk:
    name: python
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
      - name: Setup versioning env vars
        env:
          version: ${{ inputs.version }}
        run: |
          ./scripts/versions.sh | tee -a "${GITHUB_ENV}"
      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ inputs.python-version }}
          cache: pip
          cache-dependency-path: sdk/python/requirements.txt
      - name: Build Pulumi Python SDK wheel
        run: |
          # TODO unify with sdk/python/Makefile once that does not use pipenv
          cp README.md sdk/python/lib
          cd sdk/python/lib
          sed -i.bak "s/\${VERSION}/$PYPI_VERSION/g" setup.py
          rm setup.py.bak
          python3 -m venv venv
          source venv/bin/activate
          python -m pip install wheel
          python setup.py build bdist_wheel --python-tag py3
      - name: Upload pulumi.whl
        uses: actions/upload-artifact@v2
        with:
          name: artifacts-python-sdk
          path: sdk/python/lib/dist/*.whl
          retention-days: 1
          if-no-files-found: error

  build_node_sdk:
    name: nodejs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
      - name: Setup versioning env vars
        env:
          version: ${{ inputs.version }}
        run: |
          ./scripts/versions.sh | tee -a "${GITHUB_ENV}"
      - name: Set up Node ${{ inputs.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}
          cache: yarn
          cache-dependency-path: sdk/nodejs/package.json
      - name: Install yarn
        run: |
          npm install -g yarn
      # TODO something in `cd sdk/nodejs && make ensure` executes Go
      # downloads, which is unfortunate and wasteful in this context.
      # When this is fixed the no-op Go command can be removed.
      - name: Make no-op Go command to avoid Go builds
        run: |
           cd sdk/nodejs
           mkdir -p bin
           # shellcheck disable=SC2230 # need to locate echo binary
           ln -s "$(which echo)" bin/go
      - name: Ensure installed dependencies
        run: |
          cd sdk/nodejs
          PATH=./bin:$PATH make ensure
      - name: Build the Node SDK package
        run: |
          cd sdk/nodejs
          PATH=./bin:$PATH make build_package
      - name: Pack the Node SDK
        run: |
          cd sdk/nodejs/bin
          npm pack
      - name: Upload pulumi-node-sdk.tgz
        uses: actions/upload-artifact@v2
        with:
          name: artifacts-nodejs-sdk
          path: sdk/nodejs/bin/*.tgz
          retention-days: 1
          if-no-files-found: error

  build_dotnet_sdk:
    name: dotnet
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
      - name: Setup versioning env vars
        env:
          version: ${{ inputs.version }}
        run: |
          ./scripts/versions.sh | tee -a "${GITHUB_ENV}"
      - name: Set up DotNet ${{ inputs.dotnet-version }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
      - name: Build the .NET SDK package
        run: |
          cd sdk/dotnet
          dotnet build --configuration Release dotnet.sln "/p:Version=${DOTNET_VERSION}"
      - name: Pack the .NET SDK package
        run: |
          cd sdk/dotnet
          dotnet pack --configuration Release --output nupkgs dotnet.sln "/p:Version=${DOTNET_VERSION}"
      - name: Upload the NuGet packages
        uses: actions/upload-artifact@v2
        with:
          name: artifacts-dotnet-sdk
          path: sdk/dotnet/nupkgs/*.nupkg
          retention-days: 1
          if-no-files-found: error
